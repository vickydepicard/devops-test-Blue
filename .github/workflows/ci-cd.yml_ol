# üîÅ Nom du workflow GitHub Actions
name: CI/CD Pipeline

# üöÄ D√©clenchement automatique √† chaque push sur la branche "main"
on:
  push:
    branches:
      - main

# üåç Variables d‚Äôenvironnement globales (r√©utilisables dans tout le pipeline)
env:
  PROJECT_ID: ${{ secrets.GCLOUD_PROJECT }}           # ID du projet GCP (√† stocker dans les secrets GitHub)
  REGION: ${{ secrets.GCLOUD_REGION }}               # R√©gion GCP (ex: europe-west1)
  SERVICE_NAME: php-fpm-service                      # Nom du service Cloud Run
  IMAGE_NAME: php-fpm-app                            # Nom de l‚Äôimage Docker
  REPOSITORY_NAME: my-repo                           # Nom du d√©p√¥t Artifact Registry
  GCR_HOSTNAME: europe-docker.pkg.dev                # Domaine du registre Docker Artifact Registry (pour la r√©gion Europe)

jobs:
  build-deploy:
    name: Build and Deploy to Cloud Run              # üí° Nom du job affich√© dans l‚Äôinterface GitHub Actions
    runs-on: ubuntu-latest                           # üêß Ex√©cute le job sur la derni√®re version d‚ÄôUbuntu disponible

    steps:
      #  √âtape 1 : R√©cup√©rer le code source du d√©p√¥t GitHub
      - name: Checkout Repository
        uses: actions/checkout@v3

      #  √âtape 2 : Installer et configurer le SDK Google Cloud
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}          # Utilise l‚ÄôID du projet d√©fini en variable d‚Äôenvironnement
          service_account_key: ${{ secrets.GCLOUD_SA_KEY }} # Cl√© du compte de service stock√©e dans GitHub secrets
          export_default_credentials: true           # Rend les identifiants accessibles aux √©tapes suivantes

      #  √âtape 3 : Authentifier Docker avec Artifact Registry (n√©cessaire pour le push)
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}

      # √âtape 4 : Construire l‚Äôimage Docker avec le bon chemin du Dockerfile
      - name: Build Docker Image
        run: |
          docker build \
            -t ${{ env.GCR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            -f modules/cloud_run/Dockerfile modules/cloud_run/

      #  √âtape 5 : Pousser l‚Äôimage construite vers Artifact Registry
      - name: Push Docker Image to Artifact Registry
        run: |
          docker push ${{ env.GCR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest

      # √âtape 6 : D√©ployer l‚Äôimage sur Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.GCR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated                # Acc√®s public √† l‚ÄôURL Cloud Run (√† adapter selon besoins de s√©curit√©)

